<context>
# Overview  
Gpters는 모바일 친화적인 코딩 교육 플랫폼으로, 게임처럼 재미있게 프로그래밍을 배울 수 있는 퀴즈 기반 웹 서비스입니다. 초급자부터 고급자까지 단계별로 다른 학습 방식을 제공하며, 출석체크, 리그전, 환급제 등 게이미피케이션 요소를 통해 학습 동기를 부여합니다.

# Core Features  
## 1. 적응형 레벨 시스템 (0~5단계)
- **시력검사식 레벨테스트**: 사용자의 현재 실력을 정확히 측정
- **지수 분배 경험치 시스템**: 레벨 0(0점) → 레벨 5(45,000점)
- **레벨별 차별화된 학습 방식**:
  - 레벨 0-1: 스크래치 기반 블록 코딩
  - 레벨 2-3: 빈칸 채우기 방식
  - 레벨 4-5: 직접 타이핑 코딩

## 2. 개인화된 온보딩
- **4단계 설문조사**: 직업, 목적, 현재 레벨, 가입 동기
- **간편 로그인**: 소셜 로그인 지원
- **맞춤형 학습 경로 추천**

## 3. 게이미피케이션 시스템
- **일일 출석체크**: 하루 한 문제 해결로 출석 인정
- **환급제**: 한 달 완주 시 90% 환급 (커피 한 잔 값으로 취업 준비)
- **주간 리그전**: 사용자들 간 경쟁 시스템
- **평가 시스템**: 문제 해결 후 "붐업/붐따" 평가

## 4. 스마트 문제 관리
- **OpenAI 기반 문제 생성**: 레벨별 맞춤 문제 자동 생성
- **문제 저장소**: 레벨테스트 문제는 고정, 일반 문제는 랜덤 생성 후 저장
- **Rating 시스템**: 인기순 문제 정렬
- **신고 기능**: 부적절한 문제 신고 및 유효성 검증

## 5. 학습 지원 도구
- **실시간 타이머**: 문제 해결 시간 측정
- **자동완성 기능**: 코딩 효율성 향상
- **난이도 범위**: 아장아장 레벨부터 코딩테스트 레벨까지

# User Experience  
## 주요 사용자군
1. **코딩 입문자**: 프로그래밍을 처음 배우는 사람들
2. **취업 준비생**: 코딩테스트 대비가 필요한 구직자
3. **현직 개발자**: 스킬 향상 및 새로운 언어 학습
4. **학생**: 컴퓨터과학 전공생 및 코딩 교육 수강생

## 핵심 사용자 플로우
1. **회원가입 및 온보딩**: 설문조사 → 레벨테스트 → 학습 경로 설정
2. **일일 학습**: 로그인 → 오늘의 문제 → 해결 → 출석체크 → 진도 확인
3. **리그전 참여**: 주간 리그 확인 → 랭킹 문제 도전 → 순위 경쟁
4. **진도 관리**: 마이페이지에서 레벨, 통계, 학습 기록 확인

## UI/UX 고려사항
- **모바일 퍼스트 접근**: 터치 친화적 인터페이스
- **Progressive Web App (PWA)**: 네이티브 앱과 같은 경험
- **접근성**: 다양한 사용자 그룹을 위한 유니버설 디자인
</context>
<PRD>
# Technical Architecture  
## Frontend (React 기반)
- **반응형 웹 디자인**: 모바일 퍼스트 접근
- **Progressive Web App (PWA)**: 네이티브 앱과 같은 경험
- **컴포넌트 구조**:
  - 문제 해결 인터페이스 (레벨별 차별화)
  - 실시간 타이머 컴포넌트
  - 통계 그래프 컴포넌트
  - 리그전 랭킹 시스템

## Backend (Node.js 기반)
- **RESTful API**: 사용자, 문제, 리그, 통계 관리
- **실시간 기능**: Socket.io로 리그전 실시간 업데이트
- **인증 시스템**: JWT 기반 + 소셜 로그인 (Google, Kakao, GitHub)
- **경험치 시스템**: 지수 분배 알고리즘 구현

## AI/ML 서비스 (OpenAI 연동)
- **문제 생성 엔진**: 레벨별, 주제별 맞춤 문제 생성
- **코드 평가**: 사용자 답안의 정확성 및 효율성 평가
- **학습 패턴 분석**: 개인별 약점 분석 및 추천

## 데이터베이스 설계
- **사용자 테이블**: 개인정보, 레벨, 경험치, 출석 기록
- **문제 테이블**: 문제 내용, 난이도, 카테고리, 평가 점수
- **리그 테이블**: 주간 순위, 참여자, 점수
- **통계 테이블**: 학습 기록, 진도율, 성취도

# Development Roadmap  
## Phase 1: MVP (핵심 기능)
1. **기본 사용자 시스템**
   - 회원가입/로그인
   - 기본 프로필 관리
   - 설문조사 온보딩

2. **레벨테스트 시스템**
   - 0-5단계 레벨 분류
   - 시력검사식 테스트 구현
   - 결과 기반 레벨 배정

3. **기본 문제 해결 시스템**
   - 레벨 0-1: 스크래치 인터페이스
   - 레벨 2-3: 빈칸 채우기
   - 레벨 4-5: 코드 에디터

4. **출석체크 시스템**
   - 일일 문제 해결 추적
   - 출석 현황 표시

## Phase 2: 게이미피케이션 강화
1. **리그전 시스템**
   - 주간 리그 구현
   - 실시간 랭킹
   - 리그별 보상

2. **환급제 시스템**
   - 결제 연동
   - 출석률 추적
   - 자동 환급 처리

3. **평가 및 피드백**
   - 문제 평가 시스템
   - 사용자 피드백 수집
   - 신고 기능

## Phase 3: AI 및 고도화
1. **OpenAI 연동**
   - 문제 자동 생성
   - 개인 맞춤 추천
   - 코드 리뷰 기능

2. **고급 통계 기능**
   - 학습 패턴 분석
   - 성장 그래프
   - 약점 진단

3. **소셜 기능**
   - 친구 시스템
   - 스터디 그룹
   - 코드 공유

# Logical Dependency Chain
## 1단계: 기반 구조 (Foundation)
- **인프라 설정**: 프로젝트 초기화 → 데이터베이스 설계 → 기본 API 구조
- **사용자 시스템**: 인증 시스템 → 사용자 프로필 → 권한 관리

## 2단계: 핵심 학습 시스템 (빠른 사용 가능한 프론트엔드)
- **온보딩 플로우**: 설문조사 → 레벨테스트 → 결과 화면
- **문제 해결 시스템**: 문제 인터페이스 → 답안 제출 → 평가 시스템
- **출석체크**: 문제 해결 추적 → 출석 상태 표시

## 3단계: 게이미피케이션 (원자적 기능으로 점진적 구축)
- **경험치 시스템**: 점수 계산 → 레벨 진행 → 진도 표시
- **리그전**: 랭킹 시스템 → 실시간 업데이트 → 보상 시스템
- **환급제**: 결제 연동 → 출석률 추적 → 자동 환급

## 4단계: 고도화 및 개선
- **AI 통합**: OpenAI 연동 → 문제 자동 생성 → 개인화 추천
- **고급 분석**: 학습 패턴 분석 → 통계 대시보드 → 성장 추적

# Risks and Mitigations  
## Technical Challenges
- **AI 비용 관리**: OpenAI API 호출 최적화 및 캐싱 전략으로 비용 절감
- **실시간 성능**: Socket.io 최적화 및 CDN 활용으로 성능 향상
- **모바일 성능**: 번들 크기 최적화 및 레이지 로딩으로 로딩 속도 개선
- **보안**: JWT 토큰 관리, HTTPS 적용, 데이터 암호화

## MVP 구축 전략
- **핵심 기능 우선**: 레벨테스트 + 기본 문제 해결로 시작하여 빠른 시장 진입
- **단계적 확장**: 사용자 피드백 기반으로 기능 추가
- **빠른 프로토타이핑**: 2주 내 기본 동작하는 버전 구축
- **사용자 테스트**: 베타 테스트를 통한 초기 검증

## Resource Constraints
- **개발 리소스**: 풀스택 개발자 1명 기준으로 개발 계획 수립
- **시간 제약**: 3개월 내 MVP 완성 목표
- **비용 관리**: 초기 단계에서 무료/저비용 서비스 활용

# Appendix  
## 기술 스택 상세
- **Frontend**: React 18, TypeScript, Bootstrap 5, PWA
- **Backend**: Node.js 18, Express 4, Socket.io 4, JWT
- **Database**: PostgreSQL (메인), Redis (캐싱/세션)
- **AI/ML**: OpenAI API GPT-4, Python (데이터 분석)
- **Deployment**: Vercel (프론트엔드), Railway (백엔드)
- **Monitoring**: Google Analytics, Sentry (에러 추적)

## 파이썬 학습 커리큘럼
### 레벨 0-1: 기초 개념 (블록 코딩)
- 변수와 데이터 타입
- 기본 연산자
- 입출력 함수

### 레벨 2-3: 제어 구조 (빈칸 채우기)
- 조건문 (if/else)
- 반복문 (for/while)
- 함수 정의 및 호출

### 레벨 4-5: 고급 개념 (직접 코딩)
- 자료구조 (리스트, 딕셔너리)
- 객체지향 프로그래밍
- 알고리즘 문제해결

## 연구 조사 결과
- **경쟁 서비스 분석**: 프로그래머스, 백준, 코드카타 등 기존 서비스 대비 차별화 포인트
- **사용자 니즈 조사**: 게이미피케이션 요소에 대한 높은 수요 확인
- **기술 타당성**: React + Node.js 스택으로 충분한 성능 확보 가능
</PRD> 